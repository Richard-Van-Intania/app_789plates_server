async fn my_middleware1(request: Request, next: Next) -> Response {
    // do something with `request`...
    println!("hello from my_middleware1 in at {}", Local::now());
    sleep(time::Duration::from_secs(10)).await;

    let response = next.run(request).await;

    // do something with `response`...
    println!("hello from my_middleware1 out at {}", Local::now());
    sleep(time::Duration::from_secs(1)).await;

    response
}

async fn my_middleware2(request: Request, next: Next) -> Response {
    // do something with `request`...
    println!("hello from my_middleware2 in at {}", Local::now());
    sleep(time::Duration::from_secs(1)).await;

    let response = next.run(request).await;

    // do something with `response`...
    println!("hello from my_middleware2  out at {}", Local::now());
    sleep(time::Duration::from_secs(1)).await;

    response
}

pub async fn my_middleware(request: Request, next: Next) -> Result<impl IntoResponse, StatusCode> {
    // do something with `request`...

    let response = next.run(request).await;

    // do something with `response`...

    Ok(response)
}

async fn validate_email(request: Request, next: Next) -> Response {
    // do something with `request`...
    // request turn

    let response = next.run(request).await;

    // do something with `response`...
    // response turn

    response
}



async fn my_middleware0(request: Request, next: Next) -> Response {
    let (parts, body) = request.into_parts();

    let bytes = to_bytes(body, usize::MAX).await.unwrap();

    let Json(mut payload) = Json::<Authentication>::from_bytes(&bytes).unwrap();

    // println!("{:#?}", payload);

    payload.email = payload.email.to_lowercase();

    let body = Json(payload).into_response().into_body();

    let req = Request::from_parts(parts, body);

    let response = next.run(req).await;

    // do something with `response`...

    response
}